import { CommonModule } from '@angular/common';
import { Component, ContentChildren, EventEmitter, forwardRef, Input, Output, Host, Inject, NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["*"];
function NgxTimeDurationPickerUnitComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.label);
} }
class NgxTimeDurationPickerComponent {
    constructor() {
        this.supportedUnits = {
            millisecond: {
                label: 'Millisecond',
                max: 999,
                min: 0,
                value: 0,
                step: 1
            },
            second: {
                label: 'Second',
                max: 59,
                min: 0,
                value: 0,
                step: 1
            },
            minute: {
                label: 'Minute',
                max: 59,
                min: 0,
                value: 0,
                step: 1
            },
            hour: {
                label: 'Hour',
                max: 23,
                min: 0,
                value: 0,
                step: 1
            },
            day: {
                label: 'Day',
                max: 7,
                min: 0,
                value: 0,
                step: 1
            },
            week: {
                label: 'Week',
                max: 51,
                min: 0,
                value: 0,
                step: 1
            },
            month: {
                label: 'Month',
                max: 12,
                min: 0,
                value: 0,
                step: 1
            },
            year: {
                label: 'Year',
                max: 10,
                min: 0,
                value: 0,
                step: 1
            }
        };
        this.convert = {
            week: {
                week: 1,
                day: 7,
                hour: 168,
                minute: 10080,
                second: 604800,
                millisecond: 604800000
            },
            day: {
                week: 0.041666666666666664,
                day: 1,
                hour: 24,
                minute: 1440,
                second: 86400,
                millisecond: 86400000
            },
            hour: {
                week: 0.0006944444444444445,
                day: 0.016666666666666666,
                hour: 1,
                minute: 60,
                second: 3600,
                millisecond: 3600000
            },
            minute: {
                week: 0.000011574074074074073,
                day: 0.0002777777777777778,
                hour: 0.016666666666666666,
                minute: 1,
                second: 60,
                millisecond: 60000
            },
            second: {
                week: 1.1574074074074076e-8,
                day: 2.777777777777778e-7,
                hour: 0.000016666666666666667,
                minute: 0.001,
                second: 1,
                millisecond: 1000
            },
            millisecond: {
                week: 1.1574074074074076e-8,
                day: 2.777777777777778e-7,
                hour: 0.000016666666666666667,
                minute: 0.001,
                second: 1,
                millisecond: 1
            }
        };
        this.OnChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (!this.returnedValueUnit) {
            this.returnedValueUnit = 'second';
        }
        this.returnedValueUnit = this.returnedValueUnit.trim().toLowerCase();
        if (this.inputDisabled == null) {
            this.inputDisabled = true;
        }
    }
    /**
     * @return {?}
     */
    updateValue() {
        this.OnChange.emit(this.getValue());
    }
    /**
     * @return {?}
     */
    getValue() {
        /** @type {?} */
        let value = 0;
        this.units.toArray().forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            value += this.convert[element.name.toLocaleLowerCase()][this.returnedValueUnit] * element.getValue();
        }));
        return value;
    }
}
NgxTimeDurationPickerComponent.ɵfac = function NgxTimeDurationPickerComponent_Factory(t) { return new (t || NgxTimeDurationPickerComponent)(); };
NgxTimeDurationPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxTimeDurationPickerComponent, selectors: [["ngx-time-duration-picker"]], contentQueries: function NgxTimeDurationPickerComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxTimeDurationPickerUnitComponent, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.units = _t);
    } }, inputs: { returnedValueUnit: "returnedValueUnit", inputDisabled: "inputDisabled" }, outputs: { OnChange: "OnChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function NgxTimeDurationPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/** @nocollapse */
NgxTimeDurationPickerComponent.ctorParameters = () => [];
NgxTimeDurationPickerComponent.propDecorators = {
    returnedValueUnit: [{ type: Input }],
    inputDisabled: [{ type: Input }],
    OnChange: [{ type: Output }],
    units: [{ type: ContentChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => NgxTimeDurationPickerUnitComponent)),] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxTimeDurationPickerComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-time-duration-picker',
                template: `
  <ng-content></ng-content>
  `
            }]
    }], function () { return []; }, { OnChange: [{
            type: Output
        }], returnedValueUnit: [{
            type: Input
        }], inputDisabled: [{
            type: Input
        }], units: [{
            type: ContentChildren,
            args: [forwardRef(( /**
                             * @return {?}
                             */() => NgxTimeDurationPickerUnitComponent))]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxTimeDurationPickerUnitComponent {
    /**
     * @param {?} timeDurationPicker
     */
    constructor(timeDurationPicker) {
        this.timeDurationPicker = timeDurationPicker;
        this.OnChange = new EventEmitter();
        this.value = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.name = this.name.toLocaleLowerCase();
        /** @type {?} */
        const supportedUnitsNames = Object.keys(this.timeDurationPicker.supportedUnits);
        if (supportedUnitsNames.indexOf(this.name) === -1) {
            throw new Error('Unsupported unit: ' + this.name);
        }
        if (this.label == null) {
            this.label = this.name.charAt(0).toUpperCase() + this.name.slice(1);
        }
        if (this.step == null) {
            this.step = 1;
        }
        if (this.timeDurationPicker.inputDisabled != null) {
            this.inputDisabled = this.timeDurationPicker.inputDisabled;
        }
        if (this.inputDisabled == null) {
            this.inputDisabled = true;
        }
        if (this.min == null) {
            this.min = this.timeDurationPicker.supportedUnits[this.name].min;
        }
        if (this.max == null) {
            this.max = this.timeDurationPicker.supportedUnits[this.name].max;
        }
    }
    /**
     * @return {?}
     */
    increaseValue() {
        /** @type {?} */
        let currentValue = this.value;
        if (currentValue < this.max) {
            currentValue = +currentValue + +this.step;
        }
        else {
            currentValue = this.min;
        }
        this.value = currentValue;
        this.updateValue();
    }
    /**
     * @return {?}
     */
    decreaseValue() {
        /** @type {?} */
        let currentValue = this.value;
        if (currentValue > this.min) {
            currentValue = currentValue - this.step;
        }
        else {
            currentValue = this.max;
        }
        this.value = currentValue;
        this.updateValue();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    checkValue(event) {
        /** @type {?} */
        let currentValue = event.target.value;
        if (currentValue < this.min) {
            currentValue = this.min;
        }
        else if (currentValue > this.max) {
            currentValue = this.max;
        }
        if (currentValue !== +currentValue) {
            currentValue = Math.round(currentValue);
        }
        event.target.value = currentValue;
        this.updateValue();
    }
    /**
     * @return {?}
     */
    updateValue() {
        this.OnChange.emit(this.getValue());
        this.timeDurationPicker.updateValue();
    }
    /**
     * @return {?}
     */
    getValue() {
        return this.value;
    }
}
NgxTimeDurationPickerUnitComponent.ɵfac = function NgxTimeDurationPickerUnitComponent_Factory(t) { return new (t || NgxTimeDurationPickerUnitComponent)(ɵngcc0.ɵɵdirectiveInject(forwardRef(( /**
                 * @return {?}
                 */() => NgxTimeDurationPickerComponent)), 1)); };
NgxTimeDurationPickerUnitComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxTimeDurationPickerUnitComponent, selectors: [["ngx-time-duration-picker-unit"]], inputs: { name: "name", label: "label", step: "step", inputDisabled: "inputDisabled", min: "min", max: "max" }, outputs: { OnChange: "OnChange" }, decls: 8, vars: 5, consts: [[1, "flex-container"], [3, "click"], ["type", "number", 3, "ngModel", "disabled", "min", "max", "ngModelChange", "blur"], [4, "ngIf"]], template: function NgxTimeDurationPickerUnitComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "a", 1);
        ɵngcc0.ɵɵlistener("click", function NgxTimeDurationPickerUnitComponent_Template_a_click_1_listener() { return ctx.increaseValue(); });
        ɵngcc0.ɵɵtext(2, " \u02C4 ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div");
        ɵngcc0.ɵɵelementStart(4, "input", 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function NgxTimeDurationPickerUnitComponent_Template_input_ngModelChange_4_listener($event) { return ctx.value = $event; })("blur", function NgxTimeDurationPickerUnitComponent_Template_input_blur_4_listener($event) { return ctx.checkValue($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, NgxTimeDurationPickerUnitComponent_span_5_Template, 2, 1, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "a", 1);
        ɵngcc0.ɵɵlistener("click", function NgxTimeDurationPickerUnitComponent_Template_a_click_6_listener() { return ctx.decreaseValue(); });
        ɵngcc0.ɵɵtext(7, " \u02C5 ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("min", ctx.min);
        ɵngcc0.ɵɵpropertyInterpolate("max", ctx.max);
        ɵngcc0.ɵɵproperty("ngModel", ctx.value)("disabled", ctx.inputDisabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.label);
    } }, directives: [ɵngcc1.NumberValueAccessor, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.NgIf], styles: ["input[type=number][_ngcontent-%COMP%]::-webkit-inner-spin-button, input[type=number][_ngcontent-%COMP%]::-webkit-outer-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type=number][_ngcontent-%COMP%] {\n      text-align: center;\n      -moz-appearance:textfield;\n    }\n    .flex-container[_ngcontent-%COMP%] {\n      display: flex;\n      align-items: center;\n      flex-direction: column;\n      justify-content: center;\n    }\n    input[_ngcontent-%COMP%] {\n      width: 30px;\n      height: 26px;\n      margin-right: 2px;\n      margin-left: 2px;\n      padding: 0;\n      font-size: 13px;\n    }"] });
/** @nocollapse */
NgxTimeDurationPickerUnitComponent.ctorParameters = () => [
    { type: NgxTimeDurationPickerComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgxTimeDurationPickerComponent)),] }] }
];
NgxTimeDurationPickerUnitComponent.propDecorators = {
    name: [{ type: Input }],
    label: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    step: [{ type: Input }],
    inputDisabled: [{ type: Input }],
    OnChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxTimeDurationPickerUnitComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-time-duration-picker-unit',
                template: `
  <div class="flex-container">
    <a (click)="increaseValue()">
      &#708;
    </a>
    <div>
      <input [(ngModel)]="value" [disabled]="inputDisabled"
      (blur)="checkValue($event)" type="number" min="{{min}}" max="{{max}}"/>
      <span *ngIf="label">{{label}}</span>
    </div>
    <a (click)="decreaseValue()">
      &#709;
    </a>
	</div>
	`,
                styles: [`
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    input[type=number] {
      text-align: center;
      -moz-appearance:textfield;
    }
    .flex-container {
      display: flex;
      align-items: center;
      flex-direction: column;
      justify-content: center;
    }
    input {
      width: 30px;
      height: 26px;
      margin-right: 2px;
      margin-left: 2px;
      padding: 0;
      font-size: 13px;
    }
  `]
            }]
    }], function () { return [{ type: NgxTimeDurationPickerComponent, decorators: [{
                type: Host
            }, {
                type: Inject,
                args: [forwardRef(( /**
                                     * @return {?}
                                     */() => NgxTimeDurationPickerComponent))]
            }] }]; }, { OnChange: [{
            type: Output
        }], name: [{
            type: Input
        }], label: [{
            type: Input
        }], step: [{
            type: Input
        }], inputDisabled: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxTimeDurationPickerModule {
}
NgxTimeDurationPickerModule.ɵfac = function NgxTimeDurationPickerModule_Factory(t) { return new (t || NgxTimeDurationPickerModule)(); };
NgxTimeDurationPickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxTimeDurationPickerModule });
NgxTimeDurationPickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            FormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxTimeDurationPickerModule, { declarations: function () { return [NgxTimeDurationPickerComponent, NgxTimeDurationPickerUnitComponent]; }, imports: function () { return [CommonModule,
        FormsModule]; }, exports: function () { return [NgxTimeDurationPickerComponent, NgxTimeDurationPickerUnitComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxTimeDurationPickerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NgxTimeDurationPickerComponent,
                    NgxTimeDurationPickerUnitComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule
                ],
                exports: [
                    NgxTimeDurationPickerComponent,
                    NgxTimeDurationPickerUnitComponent
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxTimeDurationPickerUnitComponent, NgxTimeDurationPickerComponent, NgxTimeDurationPickerModule };

//# sourceMappingURL=ngx-time-duration-picker.js.map