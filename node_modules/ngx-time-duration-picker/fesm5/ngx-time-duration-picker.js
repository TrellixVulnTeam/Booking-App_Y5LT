import { CommonModule } from '@angular/common';
import { Component, ContentChildren, EventEmitter, forwardRef, Input, Output, Host, Inject, NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxTimeDurationPickerComponent = /** @class */ (function () {
    function NgxTimeDurationPickerComponent() {
        this.supportedUnits = {
            millisecond: {
                label: 'Millisecond',
                max: 999,
                min: 0,
                value: 0,
                step: 1
            },
            second: {
                label: 'Second',
                max: 59,
                min: 0,
                value: 0,
                step: 1
            },
            minute: {
                label: 'Minute',
                max: 59,
                min: 0,
                value: 0,
                step: 1
            },
            hour: {
                label: 'Hour',
                max: 23,
                min: 0,
                value: 0,
                step: 1
            },
            day: {
                label: 'Day',
                max: 7,
                min: 0,
                value: 0,
                step: 1
            },
            week: {
                label: 'Week',
                max: 51,
                min: 0,
                value: 0,
                step: 1
            },
            month: {
                label: 'Month',
                max: 12,
                min: 0,
                value: 0,
                step: 1
            },
            year: {
                label: 'Year',
                max: 10,
                min: 0,
                value: 0,
                step: 1
            }
        };
        this.convert = {
            week: {
                week: 1,
                day: 7,
                hour: 168,
                minute: 10080,
                second: 604800,
                millisecond: 604800000
            },
            day: {
                week: 0.041666666666666664,
                day: 1,
                hour: 24,
                minute: 1440,
                second: 86400,
                millisecond: 86400000
            },
            hour: {
                week: 0.0006944444444444445,
                day: 0.016666666666666666,
                hour: 1,
                minute: 60,
                second: 3600,
                millisecond: 3600000
            },
            minute: {
                week: 0.000011574074074074073,
                day: 0.0002777777777777778,
                hour: 0.016666666666666666,
                minute: 1,
                second: 60,
                millisecond: 60000
            },
            second: {
                week: 1.1574074074074076e-8,
                day: 2.777777777777778e-7,
                hour: 0.000016666666666666667,
                minute: 0.001,
                second: 1,
                millisecond: 1000
            },
            millisecond: {
                week: 1.1574074074074076e-8,
                day: 2.777777777777778e-7,
                hour: 0.000016666666666666667,
                minute: 0.001,
                second: 1,
                millisecond: 1
            }
        };
        this.OnChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NgxTimeDurationPickerComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (!this.returnedValueUnit) {
            this.returnedValueUnit = 'second';
        }
        this.returnedValueUnit = this.returnedValueUnit.trim().toLowerCase();
        if (this.inputDisabled == null) {
            this.inputDisabled = true;
        }
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerComponent.prototype.updateValue = /**
     * @return {?}
     */
    function () {
        this.OnChange.emit(this.getValue());
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerComponent.prototype.getValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var value = 0;
        this.units.toArray().forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            value += _this.convert[element.name.toLocaleLowerCase()][_this.returnedValueUnit] * element.getValue();
        }));
        return value;
    };
    NgxTimeDurationPickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-time-duration-picker',
                    template: "\n  <ng-content></ng-content>\n  "
                }] }
    ];
    /** @nocollapse */
    NgxTimeDurationPickerComponent.ctorParameters = function () { return []; };
    NgxTimeDurationPickerComponent.propDecorators = {
        returnedValueUnit: [{ type: Input }],
        inputDisabled: [{ type: Input }],
        OnChange: [{ type: Output }],
        units: [{ type: ContentChildren, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return NgxTimeDurationPickerUnitComponent; })),] }]
    };
    return NgxTimeDurationPickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxTimeDurationPickerUnitComponent = /** @class */ (function () {
    function NgxTimeDurationPickerUnitComponent(timeDurationPicker) {
        this.timeDurationPicker = timeDurationPicker;
        this.OnChange = new EventEmitter();
        this.value = 0;
    }
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.name = this.name.toLocaleLowerCase();
        /** @type {?} */
        var supportedUnitsNames = Object.keys(this.timeDurationPicker.supportedUnits);
        if (supportedUnitsNames.indexOf(this.name) === -1) {
            throw new Error('Unsupported unit: ' + this.name);
        }
        if (this.label == null) {
            this.label = this.name.charAt(0).toUpperCase() + this.name.slice(1);
        }
        if (this.step == null) {
            this.step = 1;
        }
        if (this.timeDurationPicker.inputDisabled != null) {
            this.inputDisabled = this.timeDurationPicker.inputDisabled;
        }
        if (this.inputDisabled == null) {
            this.inputDisabled = true;
        }
        if (this.min == null) {
            this.min = this.timeDurationPicker.supportedUnits[this.name].min;
        }
        if (this.max == null) {
            this.max = this.timeDurationPicker.supportedUnits[this.name].max;
        }
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.increaseValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentValue = this.value;
        if (currentValue < this.max) {
            currentValue = +currentValue + +this.step;
        }
        else {
            currentValue = this.min;
        }
        this.value = currentValue;
        this.updateValue();
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.decreaseValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentValue = this.value;
        if (currentValue > this.min) {
            currentValue = currentValue - this.step;
        }
        else {
            currentValue = this.max;
        }
        this.value = currentValue;
        this.updateValue();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.checkValue = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var currentValue = event.target.value;
        if (currentValue < this.min) {
            currentValue = this.min;
        }
        else if (currentValue > this.max) {
            currentValue = this.max;
        }
        if (currentValue !== +currentValue) {
            currentValue = Math.round(currentValue);
        }
        event.target.value = currentValue;
        this.updateValue();
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.updateValue = /**
     * @return {?}
     */
    function () {
        this.OnChange.emit(this.getValue());
        this.timeDurationPicker.updateValue();
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.getValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    NgxTimeDurationPickerUnitComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-time-duration-picker-unit',
                    template: "\n  <div class=\"flex-container\">\n    <a (click)=\"increaseValue()\">\n      &#708;\n    </a>\n    <div>\n      <input [(ngModel)]=\"value\" [disabled]=\"inputDisabled\"\n      (blur)=\"checkValue($event)\" type=\"number\" min=\"{{min}}\" max=\"{{max}}\"/>\n      <span *ngIf=\"label\">{{label}}</span>\n    </div>\n    <a (click)=\"decreaseValue()\">\n      &#709;\n    </a>\n\t</div>\n\t",
                    styles: ["\n    input[type=number]::-webkit-inner-spin-button,\n    input[type=number]::-webkit-outer-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type=number] {\n      text-align: center;\n      -moz-appearance:textfield;\n    }\n    .flex-container {\n      display: flex;\n      align-items: center;\n      flex-direction: column;\n      justify-content: center;\n    }\n    input {\n      width: 30px;\n      height: 26px;\n      margin-right: 2px;\n      margin-left: 2px;\n      padding: 0;\n      font-size: 13px;\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    NgxTimeDurationPickerUnitComponent.ctorParameters = function () { return [
        { type: NgxTimeDurationPickerComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgxTimeDurationPickerComponent; })),] }] }
    ]; };
    NgxTimeDurationPickerUnitComponent.propDecorators = {
        name: [{ type: Input }],
        label: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        step: [{ type: Input }],
        inputDisabled: [{ type: Input }],
        OnChange: [{ type: Output }]
    };
    return NgxTimeDurationPickerUnitComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxTimeDurationPickerModule = /** @class */ (function () {
    function NgxTimeDurationPickerModule() {
    }
    NgxTimeDurationPickerModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        NgxTimeDurationPickerComponent,
                        NgxTimeDurationPickerUnitComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule
                    ],
                    exports: [
                        NgxTimeDurationPickerComponent,
                        NgxTimeDurationPickerUnitComponent
                    ]
                },] }
    ];
    return NgxTimeDurationPickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxTimeDurationPickerUnitComponent, NgxTimeDurationPickerComponent, NgxTimeDurationPickerModule };

//# sourceMappingURL=ngx-time-duration-picker.js.map