/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Host, Inject, forwardRef } from '@angular/core';
import { NgxTimeDurationPickerComponent } from './ngx-time-duration-picker.component';
var NgxTimeDurationPickerUnitComponent = /** @class */ (function () {
    function NgxTimeDurationPickerUnitComponent(timeDurationPicker) {
        this.timeDurationPicker = timeDurationPicker;
        this.OnChange = new EventEmitter();
        this.value = 0;
    }
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.name = this.name.toLocaleLowerCase();
        /** @type {?} */
        var supportedUnitsNames = Object.keys(this.timeDurationPicker.supportedUnits);
        if (supportedUnitsNames.indexOf(this.name) === -1) {
            throw new Error('Unsupported unit: ' + this.name);
        }
        if (this.label == null) {
            this.label = this.name.charAt(0).toUpperCase() + this.name.slice(1);
        }
        if (this.step == null) {
            this.step = 1;
        }
        if (this.timeDurationPicker.inputDisabled != null) {
            this.inputDisabled = this.timeDurationPicker.inputDisabled;
        }
        if (this.inputDisabled == null) {
            this.inputDisabled = true;
        }
        if (this.min == null) {
            this.min = this.timeDurationPicker.supportedUnits[this.name].min;
        }
        if (this.max == null) {
            this.max = this.timeDurationPicker.supportedUnits[this.name].max;
        }
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.increaseValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentValue = this.value;
        if (currentValue < this.max) {
            currentValue = +currentValue + +this.step;
        }
        else {
            currentValue = this.min;
        }
        this.value = currentValue;
        this.updateValue();
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.decreaseValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentValue = this.value;
        if (currentValue > this.min) {
            currentValue = currentValue - this.step;
        }
        else {
            currentValue = this.max;
        }
        this.value = currentValue;
        this.updateValue();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.checkValue = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var currentValue = event.target.value;
        if (currentValue < this.min) {
            currentValue = this.min;
        }
        else if (currentValue > this.max) {
            currentValue = this.max;
        }
        if (currentValue !== +currentValue) {
            currentValue = Math.round(currentValue);
        }
        event.target.value = currentValue;
        this.updateValue();
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.updateValue = /**
     * @return {?}
     */
    function () {
        this.OnChange.emit(this.getValue());
        this.timeDurationPicker.updateValue();
    };
    /**
     * @return {?}
     */
    NgxTimeDurationPickerUnitComponent.prototype.getValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    NgxTimeDurationPickerUnitComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-time-duration-picker-unit',
                    template: "\n  <div class=\"flex-container\">\n    <a (click)=\"increaseValue()\">\n      &#708;\n    </a>\n    <div>\n      <input [(ngModel)]=\"value\" [disabled]=\"inputDisabled\"\n      (blur)=\"checkValue($event)\" type=\"number\" min=\"{{min}}\" max=\"{{max}}\"/>\n      <span *ngIf=\"label\">{{label}}</span>\n    </div>\n    <a (click)=\"decreaseValue()\">\n      &#709;\n    </a>\n\t</div>\n\t",
                    styles: ["\n    input[type=number]::-webkit-inner-spin-button,\n    input[type=number]::-webkit-outer-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type=number] {\n      text-align: center;\n      -moz-appearance:textfield;\n    }\n    .flex-container {\n      display: flex;\n      align-items: center;\n      flex-direction: column;\n      justify-content: center;\n    }\n    input {\n      width: 30px;\n      height: 26px;\n      margin-right: 2px;\n      margin-left: 2px;\n      padding: 0;\n      font-size: 13px;\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    NgxTimeDurationPickerUnitComponent.ctorParameters = function () { return [
        { type: NgxTimeDurationPickerComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgxTimeDurationPickerComponent; })),] }] }
    ]; };
    NgxTimeDurationPickerUnitComponent.propDecorators = {
        name: [{ type: Input }],
        label: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        step: [{ type: Input }],
        inputDisabled: [{ type: Input }],
        OnChange: [{ type: Output }]
    };
    return NgxTimeDurationPickerUnitComponent;
}());
export { NgxTimeDurationPickerUnitComponent };
if (false) {
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.name;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.label;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.max;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.min;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.step;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.inputDisabled;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.OnChange;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.value;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.timeDurationPicker;
}
//# sourceMappingURL=data:application/json;base64,