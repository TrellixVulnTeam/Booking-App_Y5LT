{"version":3,"sources":["ng://ngx-time-duration-picker/lib/ngx-time-duration-picker.component.ts","ng://ngx-time-duration-picker/lib/ngx-time-duration-picker-unit.component.ts","ng://ngx-time-duration-picker/lib/ngx-time-duration-picker.module.ts"],"names":["NgxTimeDurationPickerComponent","this","supportedUnits","millisecond","label","max","min","value","step","second","minute","hour","day","week","month","year","convert","OnChange","EventEmitter","prototype","ngAfterContentInit","returnedValueUnit","trim","toLowerCase","inputDisabled","updateValue","emit","getValue","_this","units","toArray","forEach","element","name","toLocaleLowerCase","Component","args","selector","template","Input","Output","ContentChildren","forwardRef","NgxTimeDurationPickerUnitComponent","timeDurationPicker","ngOnInit","Object","keys","indexOf","Error","charAt","toUpperCase","slice","increaseValue","currentValue","decreaseValue","checkValue","event","target","Math","round","decorators","type","Host","Inject","NgxTimeDurationPickerModule","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n} from '@angular/core';\n\nimport { NgxTimeDurationPickerUnitComponent } from './ngx-time-duration-picker-unit.component';\nimport { SupportedUnits } from './time-duration-picker';\n\n@Component({\n  selector: 'ngx-time-duration-picker',\n  template: `\n  <ng-content></ng-content>\n  `,\n  styles: []\n})\nexport class NgxTimeDurationPickerComponent implements AfterContentInit {\n\n  supportedUnits: SupportedUnits = {\n    millisecond: {\n      label: 'Millisecond',\n      max: 999,\n      min: 0,\n      value: 0,\n      step: 1\n    },\n    second: {\n      label: 'Second',\n      max: 59,\n      min: 0,\n      value: 0,\n      step: 1\n    },\n    minute: {\n      label: 'Minute',\n      max: 59,\n      min: 0,\n      value: 0,\n      step: 1\n    },\n    hour: {\n      label: 'Hour',\n      max: 23,\n      min: 0,\n      value: 0,\n      step: 1\n    },\n    day: {\n      label: 'Day',\n      max: 7,\n      min: 0,\n      value: 0,\n      step: 1\n    },\n    week: {\n      label: 'Week',\n      max: 51,\n      min: 0,\n      value: 0,\n      step: 1\n    },\n    month: {\n      label: 'Month',\n      max: 12,\n      min: 0,\n      value: 0,\n      step: 1\n    },\n    year: {\n      label: 'Year',\n      max: 10,\n      min: 0,\n      value: 0,\n      step: 1\n    }\n  };\n  private convert: any = {\n    week: {\n      week: 1,\n      day: 7,\n      hour: 168,\n      minute: 10080,\n      second: 604800,\n      millisecond: 604800000\n    },\n    day: {\n      week: 0.041666666666666664,\n      day: 1,\n      hour: 24,\n      minute: 1440,\n      second: 86400,\n      millisecond: 86400000\n    },\n    hour: {\n      week: 0.0006944444444444445,\n      day: 0.016666666666666666,\n      hour: 1,\n      minute: 60,\n      second: 3600,\n      millisecond: 3600000\n    },\n    minute: {\n      week: 0.000011574074074074073,\n      day: 0.0002777777777777778,\n      hour: 0.016666666666666666,\n      minute: 1,\n      second: 60,\n      millisecond: 60000\n    },\n    second: {\n      week: 1.1574074074074076e-8,\n      day: 2.777777777777778e-7,\n      hour: 0.000016666666666666667,\n      minute: 0.001,\n      second: 1,\n      millisecond: 1000\n    },\n    millisecond: {\n      week: 1.1574074074074076e-8,\n      day: 2.777777777777778e-7,\n      hour: 0.000016666666666666667,\n      minute: 0.001,\n      second: 1,\n      millisecond: 1\n    }\n  };\n  @Input() returnedValueUnit: any;\n  @Input() inputDisabled: boolean;\n\n  @Output() OnChange: EventEmitter<number>;\n\n  @ContentChildren(forwardRef(() => NgxTimeDurationPickerUnitComponent)) units: QueryList<NgxTimeDurationPickerUnitComponent>;\n  name: any;\n\n  constructor() {\n    this.OnChange = new EventEmitter();\n    \n  }\n\n  ngAfterContentInit() {\n    if (!this.returnedValueUnit) {\n      this.returnedValueUnit = 'second';\n    }\n    this.returnedValueUnit = this.returnedValueUnit.trim().toLowerCase();\n    if (this.inputDisabled == null) {\n      this.inputDisabled = true;\n    }\n  }\n\n  public updateValue() {\n    this.OnChange.emit(this.getValue());\n  }\n\n  public getValue(): number {\n    let value = 0;\n    this.units.toArray().forEach(element => {\n      value += this.convert[element.name.toLocaleLowerCase()][this.returnedValueUnit] * element.getValue();\n    });\n    return value;\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output, Host, Inject, forwardRef } from '@angular/core';\nimport { NgxTimeDurationPickerComponent } from './ngx-time-duration-picker.component';\n\n@Component({\n  selector: 'ngx-time-duration-picker-unit',\n  template: `\n  <div class=\"flex-container\">\n    <a (click)=\"increaseValue()\">\n      &#708;\n    </a>\n    <div>\n      <input [(ngModel)]=\"value\" [disabled]=\"inputDisabled\"\n      (blur)=\"checkValue($event)\" type=\"number\" min=\"{{min}}\" max=\"{{max}}\"/>\n      <span *ngIf=\"label\">{{label}}</span>\n    </div>\n    <a (click)=\"decreaseValue()\">\n      &#709;\n    </a>\n\t</div>\n\t`,\n  styles: [`\n    input[type=number]::-webkit-inner-spin-button,\n    input[type=number]::-webkit-outer-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    input[type=number] {\n      text-align: center;\n      -moz-appearance:textfield;\n    }\n    .flex-container {\n      display: flex;\n      align-items: center;\n      flex-direction: column;\n      justify-content: center;\n    }\n    input {\n      width: 30px;\n      height: 26px;\n      margin-right: 2px;\n      margin-left: 2px;\n      padding: 0;\n      font-size: 13px;\n    }\n  `]\n})\nexport class NgxTimeDurationPickerUnitComponent implements OnInit {\n\n  @Input() name: string;\n  @Input() label: string;\n  @Input() max: number;\n  @Input() min: number;\n  @Input() step: number;\n  @Input() inputDisabled: boolean;\n\n  @Output() OnChange: EventEmitter<number>;\n\n  value: number;\n\n  constructor(@Host() @Inject(forwardRef(() => NgxTimeDurationPickerComponent)) public timeDurationPicker: NgxTimeDurationPickerComponent) {\n    this.OnChange = new EventEmitter();\n    this.value = 0;\n  }\n\n  ngOnInit() {\n    this.name = this.name.toLocaleLowerCase();\n    const supportedUnitsNames = Object.keys(this.timeDurationPicker.supportedUnits);\n    if (supportedUnitsNames.indexOf(this.name) === -1) {\n      throw new Error('Unsupported unit: ' + this.name);\n    }\n    if (this.label == null) {\n      this.label = this.name.charAt(0).toUpperCase() + this.name.slice(1);\n    }\n    if (this.step == null) {\n      this.step = 1;\n    }\n    if (this.timeDurationPicker.inputDisabled != null) {\n      this.inputDisabled = this.timeDurationPicker.inputDisabled;\n    }\n    if (this.inputDisabled == null) {\n      this.inputDisabled = true;\n    }\n    if (this.min == null) {\n      this.min = this.timeDurationPicker.supportedUnits[this.name].min;\n    }\n    if (this.max == null) {\n      this.max = this.timeDurationPicker.supportedUnits[this.name].max;\n    }\n  }\n\n  increaseValue(): void {\n    let currentValue = this.value;\n    if (currentValue < this.max) {\n      currentValue = +currentValue + +this.step;\n    } else {\n      currentValue = this.min;\n    }\n    this.value = currentValue;\n    this.updateValue();\n  }\n\n  decreaseValue(): void {\n    let currentValue = this.value;\n    if (currentValue > this.min) {\n      currentValue = currentValue - this.step;\n    } else {\n      currentValue = this.max;\n    }\n    this.value = currentValue;\n    this.updateValue();\n  }\n\n  checkValue(event: any) {\n    let currentValue = event.target.value;\n    if (currentValue < this.min) {\n      currentValue = this.min;\n    } else if (currentValue > this.max) {\n      currentValue = this.max;\n    }\n    if (currentValue !== +currentValue) {\n      currentValue = Math.round(currentValue);\n    }\n    event.target.value = currentValue;\n    this.updateValue();\n  }\n\n  public updateValue() {\n    this.OnChange.emit(this.getValue());\n    this.timeDurationPicker.updateValue();\n  }\n\n  public getValue(): number {\n    return this.value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxTimeDurationPickerUnitComponent } from './ngx-time-duration-picker-unit.component';\nimport { NgxTimeDurationPickerComponent } from './ngx-time-duration-picker.component';\n\n@NgModule({\n  declarations: [\n    NgxTimeDurationPickerComponent,\n    NgxTimeDurationPickerUnitComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [\n    NgxTimeDurationPickerComponent,\n    NgxTimeDurationPickerUnitComponent\n  ]\n})\nexport class NgxTimeDurationPickerModule { }\n"]}