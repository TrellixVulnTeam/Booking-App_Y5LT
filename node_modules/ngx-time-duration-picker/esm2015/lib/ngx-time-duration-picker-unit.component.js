/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Host, Inject, forwardRef } from '@angular/core';
import { NgxTimeDurationPickerComponent } from './ngx-time-duration-picker.component';
export class NgxTimeDurationPickerUnitComponent {
    /**
     * @param {?} timeDurationPicker
     */
    constructor(timeDurationPicker) {
        this.timeDurationPicker = timeDurationPicker;
        this.OnChange = new EventEmitter();
        this.value = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.name = this.name.toLocaleLowerCase();
        /** @type {?} */
        const supportedUnitsNames = Object.keys(this.timeDurationPicker.supportedUnits);
        if (supportedUnitsNames.indexOf(this.name) === -1) {
            throw new Error('Unsupported unit: ' + this.name);
        }
        if (this.label == null) {
            this.label = this.name.charAt(0).toUpperCase() + this.name.slice(1);
        }
        if (this.step == null) {
            this.step = 1;
        }
        if (this.timeDurationPicker.inputDisabled != null) {
            this.inputDisabled = this.timeDurationPicker.inputDisabled;
        }
        if (this.inputDisabled == null) {
            this.inputDisabled = true;
        }
        if (this.min == null) {
            this.min = this.timeDurationPicker.supportedUnits[this.name].min;
        }
        if (this.max == null) {
            this.max = this.timeDurationPicker.supportedUnits[this.name].max;
        }
    }
    /**
     * @return {?}
     */
    increaseValue() {
        /** @type {?} */
        let currentValue = this.value;
        if (currentValue < this.max) {
            currentValue = +currentValue + +this.step;
        }
        else {
            currentValue = this.min;
        }
        this.value = currentValue;
        this.updateValue();
    }
    /**
     * @return {?}
     */
    decreaseValue() {
        /** @type {?} */
        let currentValue = this.value;
        if (currentValue > this.min) {
            currentValue = currentValue - this.step;
        }
        else {
            currentValue = this.max;
        }
        this.value = currentValue;
        this.updateValue();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    checkValue(event) {
        /** @type {?} */
        let currentValue = event.target.value;
        if (currentValue < this.min) {
            currentValue = this.min;
        }
        else if (currentValue > this.max) {
            currentValue = this.max;
        }
        if (currentValue !== +currentValue) {
            currentValue = Math.round(currentValue);
        }
        event.target.value = currentValue;
        this.updateValue();
    }
    /**
     * @return {?}
     */
    updateValue() {
        this.OnChange.emit(this.getValue());
        this.timeDurationPicker.updateValue();
    }
    /**
     * @return {?}
     */
    getValue() {
        return this.value;
    }
}
NgxTimeDurationPickerUnitComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-time-duration-picker-unit',
                template: `
  <div class="flex-container">
    <a (click)="increaseValue()">
      &#708;
    </a>
    <div>
      <input [(ngModel)]="value" [disabled]="inputDisabled"
      (blur)="checkValue($event)" type="number" min="{{min}}" max="{{max}}"/>
      <span *ngIf="label">{{label}}</span>
    </div>
    <a (click)="decreaseValue()">
      &#709;
    </a>
	</div>
	`,
                styles: [`
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    input[type=number] {
      text-align: center;
      -moz-appearance:textfield;
    }
    .flex-container {
      display: flex;
      align-items: center;
      flex-direction: column;
      justify-content: center;
    }
    input {
      width: 30px;
      height: 26px;
      margin-right: 2px;
      margin-left: 2px;
      padding: 0;
      font-size: 13px;
    }
  `]
            }] }
];
/** @nocollapse */
NgxTimeDurationPickerUnitComponent.ctorParameters = () => [
    { type: NgxTimeDurationPickerComponent, decorators: [{ type: Host }, { type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgxTimeDurationPickerComponent)),] }] }
];
NgxTimeDurationPickerUnitComponent.propDecorators = {
    name: [{ type: Input }],
    label: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    step: [{ type: Input }],
    inputDisabled: [{ type: Input }],
    OnChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.name;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.label;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.max;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.min;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.step;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.inputDisabled;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.OnChange;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.value;
    /** @type {?} */
    NgxTimeDurationPickerUnitComponent.prototype.timeDurationPicker;
}
//# sourceMappingURL=data:application/json;base64,